<h2>
  Percy::Capybara
  <a href="https://github.com/percy/percy-capybara">{{unbound fa-icon "github"}}</a>
</h2>

<p>
  <a href="https://travis-ci.org/percy/percy-capybara"><img src="https://travis-ci.org/percy/percy-capybara.svg?branch=master"></a>
  <a href="https://rubygems.org/gems/percy-capybara"><img src="https://badge.fury.io/rb/percy-capybara.svg"></a>
</p>

<p>
  Percy::Capybara is a library for integrating Percy into your existing <a href="https://github.com/jnicklas/capybara">Capybara</a> feature tests in any Ruby web framework—including Rails, Sinatra, etc.
</p>
<p>
  If you've written feature tests (or "UI / acceptance / browser tests"), you know how hard it can be to get them right and to get your app in the correct UI state. This lets you take all the time you've spent building your feature tests and automatically extend them with screenshots and visual testing at every step of the way, to truly see what the browser sees.
</p>
<p>
  The examples below assume you are using RSpec, but they could be easily adapted for other testing frameworks.
</p>

<h3>Installation</h3>

<p>Add this line to your application's Gemfile:</p>
{{#code-block}}
gem 'percy-capybara'
{{/code-block}}

<p>And then execute:</p>

{{#code-block lang="bash"}}
$ bundle install
{{/code-block}}

<p>Or install it yourself with <code>gem install percy-capybara</code>.</p>

<h3>Setup</h3>

First, you need to:

<ol>
  <li>Sign in and enable a repository in your account.</li>
  <li>Go to <em>Settings</em> for the repository and copy the write-only API key.</li>
</ol>

For Rails apps, add this API key to your <code><a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml">config/secrets.yml</a></code>:

{{#code-block}}
test:
  secret_key_base: 1234abcd...
  percy_access_token: &lt;PERCY WRITE-ONLY REPO TOKEN&gt;
{{/code-block}}

And then enable Percy in your <code>spec_helper.rb</code>:

{{#code-block}}
RSpec.configure do |config|
  config.before(:suite) do
    Percy.config.access_token = Rails.application.secrets.percy_access_token
  end
  config.after(:suite) { Percy::Capybara.finalize_build }
end
{{/code-block}}

<p>
  Alternatively, you could set the <code>PERCY_TOKEN</code> environment variable to avoid storing the API token in your repository.
</p>

<h3>Usage</h3>

<p>Now the fun part!</p>
<p>Usually, you'll have an existing feature spec that looks something like this:</p>

{{#code-block}}
describe 'a feature', type: :feature, js: true do
  it 'shows the dropdown menu when clicked' do
    visit '/'
    first('.dropdown-toggle').click
    expect(page).to have_selector('#main-dropdown', visible: true)
  end
end
{{/code-block}}

You can integrate with Percy by adding one line:

{{#code-block}}
<span class="dim">describe 'a feature', type: :feature, js: true do
  it 'shows the dropdown menu when clicked' do
    visit '/'
    first('.dropdown-toggle').click
    expect(page).to have_selector('#main-dropdown', visible: true)</span>
    Percy::Capybara.snapshot(page)
  <span class="dim">end
end</span>
{{/code-block}}

<p>
  Done! Snapshots will be uploaded to Percy the next time you run your tests in a {{#link-to "docs.ci"}}supported CI service{{/link-to}} (or they can be triggered locally, see below).
<p>
</p>
   The actual screenshot rendering, which often can be very slow, does <em>not</em> happen in your tests. Instead, the <code>snapshot</code> method simply grabs the current DOM, CSS, and certain page assets and uploads them to Percy for processing.
</p>
<p>
  We handle all the complexities of screenshot rendering in Percy itself so that the impact on your tests is minimal. Assets are fingerprinted when uploaded, so they are only uploaded once or when they change.
</p>

<h4>Identifying snapshots</h4>
<p>
  Percy needs to be able to uniquely identify the same snapshot across builds to provide visual diffs.
</p>
<p>
  To accomplish this, <code>Percy::Capybara</code> uses the current page's URL as the name of the snapshot. We assume that your app has been built with stateful navigation and that the URL fully identifies the page state.
</p>
<p>
  However, there are many cases where this is not enough—for example, populating test data in the page, or performing a UI interaction that doesn't change the URL (like clicking the dropdown in the example above).
</p>
<p>
  To manually identify a snapshot, you can provide the <code>name</code> parameter:
</p>

{{#code-block}}
Percy::Capybara.snapshot(page, name: 'homepage (with dropdown clicked)')
{{/code-block}}

<p>
  The <code>name</code> param can be any string that makes sense to you to identify the page state, it should just be unique and remain the same across builds.
</p>

<h3>Local dev environment</h3>

<p>
  Though disabled by default, Percy can work in local development environments by reading information from the local git repository and/or environment variables. You can use this feature to see visual diffs as you iterate on a design but before you push the final changes for review.
</p>
<p>
  Enable Percy for your local environment by setting the <code>PERCY_ENABLE</code> environment variable:
</p>

{{#code-block lang="bash"}}
$ PERCY_ENABLE=1 bundle exec rspec
{{/code-block}}

<p>
  Be aware that the Percy build will use the current local branch name, so if you run it in <code>master</code> the latest Percy master build will be from your local environment. You can avoid this by simply checking out a different branch or setting the <code>PERCY_BRANCH</code> environment variable.
</p>

<h3>Troubleshooting</h3>

You may encounter this error:

{{#code-block}}
Capybara::NotSupportedByDriverError:Capybara::Driver::Base#evaluate_script
{{/code-block}}

<p>
  This usually means that you are using the default RackTest driver which does not support JavaScript execution. To fix this, feature tests that use Percy must be tagged with <code>js: true</code>:
</p>

{{#code-block}}
describe 'some feature test', type: :feature, js: true do
  ...
end
{{/code-block}}

<p>
  You will need to make sure that your <a href="https://github.com/jnicklas/capybara#drivers">Capybara/Selenium driver</a> is properly configured.
</p>

<h4>WebMock/VCR users</h4>

<p>
  If you use <a href="https://github.com/vcr/vcr">VCR</a> to mock and record HTTP interactions, you need to allow connections to the Percy API:
</p>

{{#code-block}}
VCR.configure do |config|
  config.ignore_hosts 'percy.io'
end
{{/code-block}}

<p>
  If you use <a href="https://github.com/bblimke/webmock">WebMock</a> to stub out HTTP connections, you need to allow connections to the Percy API:
</p>

{{#code-block}}
WebMock.disable_net_connect!(allow: 'percy.io')
{{/code-block}}

<h3>Contributing</h3>

<ol>
  <li>Fork it (<a href="https://github.com/percy/percy-capybara/fork">https://github.com/percy/percy-capybara/fork</a>)</li>
  <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>
  <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>
  <li>Push to the branch (<code>git push origin my-new-feature</code>)</li>
  <li>Create a new Pull Request</li>
</ol>