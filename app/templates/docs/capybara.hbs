<h2>
  Percy::Capybara
  <a href="https://github.com/percy/percy-capybara">{{unbound fa-icon "github"}}</a>
</h2>
<p>
  <a href="https://travis-ci.org/percy/percy-capybara"><img src="https://travis-ci.org/percy/percy-capybara.svg?branch=master"></a>
  <a href="https://rubygems.org/gems/percy-capybara"><img src="https://badge.fury.io/rb/percy-capybara.svg"></a>
</p>
<p>
  Percy::Capybara is a library for integrating Percy into your existing <a href="https://github.com/jnicklas/capybara">Capybara</a> feature tests in any Ruby web framework—including Rails, Sinatra, etc.
</p>
<p>
  If you've written feature tests (or "UI / acceptance / browser tests"), you know how hard it can be to get them right and to get your app in the correct UI state. Percy::Capybara lets you take all the time you've spent building your feature tests and expand them with screenshots and visual testing at every step of the way, to truly see what the browser sees.
</p>
<p>
  The examples below assume you are using RSpec, but they could be easily adapted for other testing frameworks.
</p>

<h3>Installation</h3>
<p>Add this line to your application's Gemfile:</p>
{{#code-block}}
gem 'percy-capybara'
{{/code-block}}
<p>And then execute:</p>
{{#code-block lang="bash"}}
$ bundle install
{{/code-block}}
<p>Or install it yourself with <code>gem install percy-capybara</code>.</p>

<h3>Authentication</h3>
<p>
  First, you need to:
</p>
<ol>
  <li>Sign in and enable a repository in your account.</li>
  <li>Go to <em>Settings</em> for the repository and copy the write-only API key.</li>
</ol>

<h4>Private repositories {{fa-icon "lock"}}</h4>
<p>
  For Rails apps in private repositories, you can use <a href="http://guides.rubyonrails.org/4_1_release_notes.html#config-secrets-yml">Rails Secrets</a> to store the Percy repo token. We will use this below when configuring RSpec.
</p>
<p>
  Add this to your <code>config/secrets.yml</code>:
</p>
{{#code-block}}
test:
  percy_access_token: 1234abcd1234abcd
{{/code-block}}
<p>
  Then configure <code>spec_helper.rb</code> to set the access token from your Rails secrets:
</p>
{{#code-block lang="ruby"}}
require 'percy/capybara/rspec'

RSpec.configure do |config|
  config.before(:suite) do
    Percy.config.access_token = Rails.application.secrets.percy_access_token
  end
end
{{/code-block}}
<p>
  Alternatively, you can configure the <code>PERCY_TOKEN</code> environment variable to avoid storing the token in your repository.
</p>

<h4>Public repositories {{fa-icon "unlock"}}</h4>
<div class="Alert Alert--warning">
  <p>
    <strong>IMPORTANT: Do not store the Percy API token in your repository</strong> if your code is public. Anyone could use your token and consume your account quota (they will not be able to read data because the token is write-only).
  </p>
  <p>
    Most CI services allow you to set secure environment variables in your build settings (for example, see <a href="http://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings">Travis CI Environment Variables</a>). You should set the <code>PERCY_TOKEN</code> environment variable in your CI settings instead of storing it in your repository.
  </p>
</div>
<p>
  You can temporarily set the <code>PERCY_TOKEN</code> environment variable in your local shell session by exporting the variable:
</p>
{{#code-block lang="bash"}}
$ export PERCY_ENABLE=1  # Required only in local dev environments.
$ export PERCY_TOKEN=1234abcd1234abcd
$ bundle exec rspec
{{/code-block}}
<p>
  Or you can set it just for the current command:
</p>
{{#code-block lang="bash"}}
$ PERCY_ENABLE=1 PERCY_TOKEN=1234abcd1234abcd bundle exec rspec
{{/code-block}}

<h3>RSpec setup</h3>
<p>
  Enable Percy in your <code>spec_helper.rb</code>:
</p>
{{#code-block lang="ruby"}}
require 'percy/capybara/rspec'
{{/code-block}}
<p>
  This <code>require</code> line is important—it registers Percy's rspec hooks and must be included, even in Rails apps.
</p>

<h3>Usage</h3>
<p>Now the fun part!</p>
<p>Usually, you'll have an existing feature spec that looks something like this:</p>
{{#code-block}}
describe 'a feature', type: :feature, js: true do
  it 'shows the dropdown menu when clicked' do
    visit '/'
    first('.dropdown-toggle').click
    expect(page).to have_selector('#main-dropdown', visible: true)
  end
end
{{/code-block}}
<p>
  You can integrate with Percy by adding one line:
</p>
{{#code-block}}
<span class="dim">describe 'a feature', type: :feature, js: true do
  it 'shows the dropdown menu when clicked' do
    visit '/'
    first('.dropdown-toggle').click
    expect(page).to have_selector('#main-dropdown', visible: true)</span>
    Percy::Capybara.snapshot(page, name: 'homepage with dropdown')
  <span class="dim">end
end</span>
{{/code-block}}
<p>
  The <code>name: 'homepage with dropdown'</code> argument is not required, but it is helpful to identify the page by more than just its URL. If you are snapshotting a page multiple times with the same URL, <code>name</code> must be set. See <em>Identifying snapshots</em> below.
</p>
<p>
  Done! A new Percy build will be created the next time you run your tests in a {{#link-to "integrations.ci"}}supported CI service{{/link-to}}, or it can be triggered locally.
</p>

<h3>Local dev environments</h3>
<p>
  By default, Percy is disabled in local dev environments to avoid teams accidentally overriding each others' changes while developing feature specs.
</p>
<p>
  However, you may want to enable Percy locally while getting set up for the first time. Or, you may want to see visual diffs as you iterate on a design but before pushing the final changes for review.
</p>
<p>
  You can enable Percy for your local environment by setting the <code>PERCY_ENABLE</code> environment variable:
</p>
{{#code-block lang="bash"}}
$ PERCY_ENABLE=1 bundle exec rspec
{{/code-block}}
<p>
  Careful though—if you run this in your local <code>master</code> branch, Percy cannot tell the difference between your local environment and your CI environment, so this will set the repo's <code>master</code> state in Percy. You can avoid this by simply checking out a different branch, or setting the <code>PERCY_BRANCH</code> environment variable.
</p>

<h3>Identifying snapshots</h3>
<p>
  Percy needs to be able to uniquely identify the same snapshot across builds to provide visual diffs.
</p>
<p>
  To accomplish this, <code>Percy::Capybara</code> uses the current page URL as the name of the snapshot. We assume that your app has been built with stateful navigation and that the URL fully identifies the page state.
</p>
<p>
  However, there are many cases where this is not enough—for example, populating test data in the page, or performing a UI interaction that doesn't change the URL (like clicking the dropdown in the example above).
</p>
<p>
  To manually identify a snapshot, you can provide the <code>name</code> parameter:
</p>
{{#code-block}}
Percy::Capybara.snapshot(page, name: 'homepage (with dropdown clicked)')
{{/code-block}}
<p>
  The <code>name</code> param can be any string that makes sense to you to identify the page state, it should just be unique and remain the same across builds.
</p>
<p>
  It is <strong>required</strong> if you are snapshotting a page multiple times with the same URL.
</p>

<h3>How it works</h3>
<p>
   The actual page rendering and diffing, which often can be very slow and computationally expensive, does <em>not</em> happen in your tests. Instead, the <code>snapshot</code> method grabs a the current DOM structure, CSS, and the page's assets and uploads them to Percy.
</p>
<p>
  Percy then handles all the complexities of rendering the page in a modern browser (Firefox 38 ESR), taking a screenshot, generating a pixel-by-pixel visual diff compared to the last successful master build, setting the status of the GitHub Pull Request, etc. This is performed in our custom, parallelized rendering infrastructure—built specifically to support processing and storing hundreds or thousands of snapshots at the same time, as fast as your team and app size may need.
</p>
<p>
  This asset-centric architecture keeps the impact on your tests minimal—in most cases, the overhead for each snapshot in your tests is only a few milliseconds. Assets are also fingerprinted when uploaded, so they are only uploaded once.
</p>

<h3>Troubleshooting</h3>

<h4>WebMock/VCR users</h4>
<p>
  If you use <a href="https://github.com/vcr/vcr">VCR</a> to mock and record HTTP interactions, you need to allow connections to the Percy API:
</p>
{{#code-block}}
VCR.configure do |config|
  config.ignore_hosts 'percy.io'
end
{{/code-block}}
<p>
  If you use <a href="https://github.com/bblimke/webmock">WebMock</a> to stub out HTTP connections, you need to allow connections to the Percy API:
</p>

{{#code-block}}
WebMock.disable_net_connect!(allow: 'percy.io')
{{/code-block}}

<h4>Turn off debug assets</h4>
<p>
  After upgrading to Sprockets 3, you may notice broken CSS in Percy builds. You likely have this option set in <code>test.rb</code>:
</p>
{{#code-block}}
config.assets.debug = true
{{/code-block}}
<p>
  This must be set to false in your <code>test.rb</code> file:
</p>
{{#code-block}}
config.assets.debug = false
{{/code-block}}
<p>
  There is no compelling reason to have debug assets permanently enabled in tests—debug assets disables concatination of asset files and will negatively affect your test performance and consistency. You must turn off debug assets in tests for Percy to work correctly.
</p>

<h3>Other resources</h3>
<ul>
  <li><a href="http://www.rubydoc.info/gems/percy-capybara/Percy/Capybara">Percy::Capybara Reference</a> on RubyDoc</li>
</ul>

<h3>Contributing</h3>
<ol>
  <li>Fork it (<a href="https://github.com/percy/percy-capybara/fork">https://github.com/percy/percy-capybara/fork</a>)</li>
  <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>
  <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>
  <li>Push to the branch (<code>git push origin my-new-feature</code>)</li>
  <li>Create a new Pull Request</li>
</ol>